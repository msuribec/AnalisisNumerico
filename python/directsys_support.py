#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.6
#  in conjunction with Tcl version 8.6
#    Nov 14, 2020 07:16:22 PM EST  platform: Windows NT

import sys

import integration.Integration as integration

import linearSystems.directMethods.cholesky as cholesky
import linearSystems.directMethods.crout as crout
import linearSystems.directMethods.Doolittle as doolittle
import linearSystems.directMethods.GaussSimple as gsimple

import linearSystems.directMethods.GaussPartial as gpartial
import linearSystems.directMethods.gaussTotalPivot as gtotal
import linearSystems.directMethods.LUGaussPartial as lupartial
import linearSystems.directMethods.LUGaussSimple as lusimple


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global combobox
    combobox = tk.StringVar()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import directsys
    directsys.vp_start_gui()


def string_to_matrix(str_in):
    nums = str_in.split(',')
    n = int(len(nums) ** 0.5)
    return list(map(list, zip(*[map(int, nums)] * n)))

def runMethod(choiceInteg, matrixEntry, vectorEntry, Scrolledtext1):
    Scrolledtext1.delete("1.0", 'end')
    k = choiceInteg.get()
    xstr = matrixEntry.get()
    ystr = vectorEntry.get()
    A=string_to_matrix(xstr)


    b = list(map(float, ystr.split(',')))
    ops= ['GaussianElimination', 'GaussPartialPivot', 'GaussTotal pivot', 'LUFact',
                       'LUPartialPivoting', 'Cholesky', 'Crout', 'Doolittle', ]
    if k == ops[0]:  # Gauss Simple
        gsimple.solveGaussSimple(A,b,Scrolledtext1)
    elif k == ops[1]:  # Gauss Partial pivot
        gpartial.solveGaussPartial(A,b,Scrolledtext1)
    elif k == ops[2]:  # Gauss total pivot
        gtotal.solveGaussT(A,b,Scrolledtext1)
    elif k == ops[3]:  # LU fact
        lusimple.solveLUSimple(A,b,Scrolledtext1)
    elif k == ops[4]:  # LU fact with partial pivot
        lupartial.solveLUGaussPartial(A,b,Scrolledtext1)
    elif k == ops[5]: #cholesky
        cholesky.solveChol(A,b,Scrolledtext1)
    elif k == ops[6]: #crout
        crout.solveCrout(A,b,Scrolledtext1)
    elif k== ops[7]: # doolittle
        doolittle.solveDoolittle(A,b,Scrolledtext1)
    else:
        Scrolledtext1.insert(tk.INSERT,'Please pick a method')